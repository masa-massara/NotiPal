# --- ベースイメージ ---
# 軽量なスリム版のBunイメージを使用する
FROM oven/bun:1-slim AS base

# --- ビルドステージ ---
# アプリケーションの依存関係をインストールし、場合によってはビルドを行うステージ
FROM base AS builder
WORKDIR /usr/src/app

# package.json のみを先にコピー
COPY package.json ./
# bun.lock はビルドコンテキストに含まれないので、COPYしない

# Dockerfile内で bun install を実行し、依存関係を解決
# これにより、コンテナ内で bun.lock が適切に扱われる
# --production フラグは本番用の依存のみインストールする場合
# --frozen-lockfile は、ルートに bun.lock があり、それに基づいて厳密にインストールする場合に有効やけど、
# 今はコンテナ内で解決するので、なくてもええかもしれん。
# プロジェクトの運用に合わせて調整してください。
RUN bun install --production

# アプリケーションのソースコードをコピー
# (依存関係インストール後に行うことで、ソース変更時のキャッシュを有効活用できる)
COPY ./src ./src
COPY ./tsconfig.json ./tsconfig.json
# もし他に実行に必要なファイルがあればここに追加

# バックエンドでビルドステップが必要な場合 (例: TypeScriptのトランスパイルなど)
# 必要なければこの RUN コマンドは不要
# RUN bun run build # package.json に build スクリプトがあれば

# --- 実行ステージ ---
# 実際にアプリケーションを実行するステージ
FROM base AS release
WORKDIR /usr/src/app

# 環境変数NODE_ENVをproductionに設定
ENV NODE_ENV=production
# アプリがリッスンするポート
ENV PORT=${PORT:-8080}
EXPOSE ${PORT}

# ビルドステージから、インストール済みの依存関係と必要なソースコードをコピー
COPY --from=builder /usr/src/app/node_modules ./node_modules
COPY --from=builder /usr/src/app/src ./src
COPY --from=builder /usr/src/app/tsconfig.json ./tsconfig.json
COPY --from=builder /usr/src/app/package.json ./package.json
# ビルダーで生成・更新された bun.lock をコピーする (オプションやけど、整合性のためにあると良いかも)
COPY --from=builder /usr/src/app/bun.lock ./bun.lock


# アプリケーションの起動コマンド
CMD ["bun", "src/main.ts"]
